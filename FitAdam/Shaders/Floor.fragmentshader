#version 330 core
out vec4 color;
 
in vec3 vpos;  
in vec3 normal;  
in vec3 objectColor;
in vec4 fragPosLightSpace;
in vec3 lightPos;

uniform sampler2D shadowMap;
 
float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}

void main()
{
    // vec3 lightPos = vec3(0,0,0);  // set to 0 to ensure good lighting for camera mode + normal mode
	vec3 viewPos = vec3(0,0,0);
	vec3 lightColor = vec3(1,1,1);

    // Ambient
    float ambientStrength = 0.2f;
    vec3 ambient = ambientStrength * lightColor;
 
    // Diffuse 
    vec3 norm = normalize(normal);
    // norm = vec3(0, 1, 0);
    vec3 lightDir = normalize(lightPos - vpos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
 
    // Specular
    float specularStrength = 0.05f;
    vec3 viewDir = normalize(viewPos - vpos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;  

    // shadows
    float shadow = ShadowCalculation(fragPosLightSpace);
    vec3 light = ambient + (1.0 - shadow) * (diffuse + specular); 

    vec3 result = light * objectColor;
    color = vec4(result, 1.0);
}
